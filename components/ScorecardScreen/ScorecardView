// components/ScorecardScreen/ScorecardView.tsx

import React from 'react';
import { View, Text, StyleSheet, ScrollView } from 'react-native';
import { useColorScheme } from 'react-native';

interface Team {
  id: string;
  name: string;
  scores: (number | null)[];
}

interface ScorecardViewProps {
  teams: Team[];
  showBack9: boolean;
  matchTitle?: string;
}

const ScorecardView: React.FC<ScorecardViewProps> = ({ 
  teams, 
  showBack9, 
  matchTitle = 'Scorecard'
}) => {
  const colorScheme = useColorScheme();
  const isDark = colorScheme === 'dark';
  
  // Calculate starting hole based on front/back toggle
  const startHole = showBack9 ? 9 : 0;
  
  // Define team colors
  const teamColors = {
    '1': '#4CAE4F',  // Green
    '2': '#FFC105',  // Yellow
    '3': '#F44034'   // Red
  };
  
  // Calculate team totals
  const calculateTotals = (team: Team) => {
    const front9 = team.scores.slice(0, 9).reduce((sum, score) => 
      sum + (score !== null ? score : 0), 0);
    
    const back9 = team.scores.slice(9, 18).reduce((sum, score) => 
      sum + (score !== null ? score : 0), 0);
    
    return {
      front9,
      back9,
      total: front9 + back9
    };
  };

  return (
    <View style={[styles.container, { backgroundColor: isDark ? '#121212' : '#F5F5F5' }]}>
      {/* Title Section */}
      <View style={[styles.titleSection, { borderBottomColor: isDark ? '#333333' : '#EEEEEE' }]}>
        <Text style={[styles.title, { color: isDark ? '#FFFFFF' : '#333333' }]}>
          {matchTitle}
        </Text>
        <View style={styles.rangeIndicator}>
          <Text style={[styles.rangeText, { color: isDark ? '#AAAAAA' : '#666666' }]}>
            {showBack9 ? 'Back 9 (10-18)' : 'Front 9 (1-9)'}
          </Text>
        </View>
      </View>
      
      <ScrollView style={styles.scrollView}>
        <View style={styles.scoreboardContainer}>
          {/* Left column: Team names with color indicators */}
          <View style={styles.teamsColumn}>
            <View style={styles.holeHeaderPlaceholder} />
            {teams.map(team => (
              <View key={team.id} style={styles.teamRow}>
                <View 
                  style={[
                    styles.teamColorIndicator, 
                    { backgroundColor: teamColors[team.id as keyof typeof teamColors] || '#999999' }
                  ]} 
                />
                <Text 
                  style={[styles.teamName, { color: isDark ? '#FFFFFF' : '#333333' }]}
                  numberOfLines={1}
                  ellipsizeMode="tail"
                >
                  {team.name}
                </Text>
              </View>
            ))}
            <View style={styles.totalLabelRow}>
              <Text style={[styles.totalLabel, { color: isDark ? '#FFFFFF' : '#333333' }]}>
                {showBack9 ? 'B9' : 'F9'}
              </Text>
            </View>
            <View style={styles.totalLabelRow}>
              <Text style={[styles.totalLabel, { color: isDark ? '#FFFFFF' : '#333333' }]}>
                Total
              </Text>
            </View>
          </View>
          
          {/* Right section: Holes and scores */}
          <ScrollView horizontal showsHorizontalScrollIndicator={false}>
            <View>
              {/* Hole numbers row */}
              <View style={styles.holeNumbersRow}>
                <Text style={[styles.holeHeader, { color: isDark ? '#FFFFFF' : '#333333' }]}>
                  Hole
                </Text>
                {Array.from({ length: 9 }, (_, i) => i + startHole + 1).map(holeNum => (
                  <View key={holeNum} style={styles.holeNumberCell}>
                    <Text style={[styles.holeNumber, { color: isDark ? '#FFFFFF' : '#333333' }]}>
                      {holeNum}
                    </Text>
                  </View>
                ))}
              </View>
              
              {/* Score rows for each team */}
              {teams.map(team => (
                <View key={team.id} style={styles.scoreRow}>
                  {team.scores.slice(startHole, startHole + 9).map((score, idx) => (
                    <View 
                      key={idx} 
                      style={[
                        styles.scoreCell, 
                        { borderColor: isDark ? '#333333' : '#DDDDDD' }
                      ]}
                    >
                      <Text style={[styles.scoreValue, { color: isDark ? '#FFFFFF' : '#333333' }]}>
                        {score !== null ? score : '-'}
                      </Text>
                    </View>
                  ))}
                </View>
              ))}
              
              {/* Front/Back 9 totals row */}
              <View style={styles.totalsRow}>
                {teams.map(team => {
                  const totals = calculateTotals(team);
                  return (
                    <View 
                      key={team.id} 
                      style={[styles.totalCell, { borderColor: isDark ? '#333333' : '#DDDDDD' }]}
                    >
                      <Text style={[styles.totalValue, { color: isDark ? '#FFFFFF' : '#333333' }]}>
                        {showBack9 ? totals.back9 : totals.front9}
                      </Text>
                    </View>
                  );
                })}
              </View>
              
              {/* Overall totals row */}
              <View style={styles.totalsRow}>
                {teams.map(team => {
                  const totals = calculateTotals(team);
                  return (
                    <View 
                      key={team.id} 
                      style={[styles.totalCell, { borderColor: isDark ? '#333333' : '#DDDDDD' }]}
                    >
                      <Text style={[styles.totalValue, { color: isDark ? '#FFFFFF' : '#333333' }]}>
                        {totals.total}
                      </Text>
                    </View>
                  );
                })}
              </View>
            </View>
          </ScrollView>
        </View>